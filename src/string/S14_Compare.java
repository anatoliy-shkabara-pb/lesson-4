package string;

public class S14_Compare {
    public static void main(String[] args) {
        // boolean equals(Object anObject) — проверяет идентичность строк.
        // Возвращает true только в том случае, если в строках представлена одинаковая последовательность символов одной величены.
        String str = "Я помню ЧУДНОЕ мгновенье";
        String str2 = "я помню чудное мгновенье";
        //строки не идентичны
        System.out.println(str.equals(str2)); //false

        //строки идентичны после перевода первой строки
        //в нижний регистр
        System.out.println(str.toLowerCase().equals(str2)); // true


        // int compareTo(String anotherString) — так же проверяет идентичность строк, однако, в отличии от метода equals возвращает:
        // нулевое значение, если строки равны,
        // целое отрицательное число, если первая строка предшествует второй
        // целое положительное число, если  первая строка следует за второй

        // Данный метод предназначен для упорядочивания строк.
        // Он позволяет сравнить строки между собой и определить предшествующую строку.
        // Для того, чтобы реализовать такое сравнение метод сравнивает числовые значения букв.

        String name1 = "Маша";
        String name2 = "Миша";
        System.out.println(name1.compareTo(name2)); //-8
        System.out.println(name2.compareTo(name1)); //8

        // Однако, в случае, если мы напишем «маша» с маленькой буквы и попробуем сравнить с «Миша», то получим положительное число.
        System.out.println("маша".compareTo("Миша")); //32
        // То есть в данном случае имя «Миша» предшествует имени «маша».
        // Это происходит потому, что в таблице символов Юникода буквы верхнего регистра предшествуют нижнему.

        //Для сравнения строк без учета регистра символов используется функция int compareToIgnoreCase(String str)
        System.out.println("маша".compareToIgnoreCase("Миша")); //-8

    }
}
